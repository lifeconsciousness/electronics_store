import { Field } from "@components/common/form/Field";
import { Form } from "@components/common/form/Form";
import { _ } from "@evershop/evershop/lib/locale/translate/_";
import StartIcon from "@heroicons/react/solid/esm/StarIcon";
import PropTypes from "prop-types";
import React from "react";
export default function ReviewForm({ action, product }) {
    const [error, setError] = React.useState(null);
    const [rating, setRating] = React.useState(0);
    const [isSubmitted, setIsSubmitted] = React.useState(false);
    const onSuccess = (response) => {
        if (!response.error) {
            setIsSubmitted(true);
        }
        else {
            setError(response.error.message);
        }
    };
    const rate = (score) => {
        setRating(score);
    };
    return (React.createElement("div", { className: "product-comment-form" },
        isSubmitted && (React.createElement("div", { className: "success text-success" }, _("Your review has been submitted successfully!"))),
        !isSubmitted && (React.createElement(React.Fragment, null,
            React.createElement("h3", null, _("Your comment")),
            error && React.createElement("div", { className: "error text-critical" }, error),
            React.createElement(Form, { id: "comment-form", action: action, method: "POST", onSuccess: onSuccess, isJSON: true, btnText: _("Submit review") },
                React.createElement("label", { htmlFor: "rating" }, _("Your Rating")),
                React.createElement("div", { className: "rating__stars" }, [...Array(5)].map((e, i) => (React.createElement("a", { key: i, className: "", href: "#", onClick: (element) => {
                        element.preventDefault();
                        rate(i + 1);
                    } },
                    React.createElement(StartIcon, { width: 20, height: 20, fill: rating > i ? "#ff5501" : "#989898" }))))),
                React.createElement(Field, { type: "hidden", name: "rating", value: rating, validationRules: ["required"] }),
                React.createElement(Field, { name: "customer_name", label: _("Your Name"), type: "text", validationRules: ["notEmpty"] }),
                React.createElement(Field, { name: "comment", label: _("Your Comment"), type: "textarea", validationRules: ["notEmpty"] }),
                React.createElement(Field, { type: "hidden", name: "product_id", value: product.productId }))))));
}
ReviewForm.propTypes = {
    action: PropTypes.string.isRequired,
    product: PropTypes.shape({
        productId: PropTypes.number.isRequired,
    }).isRequired,
};
export const layout = {
    areaId: "productPageMiddleLeft",
    sortOrder: 50,
};
export const query = `
  query {
    action: url(routeId: "addReview"),
    product: product(id: getContextValue("productId")) {
      productId
    }
  }
`;
//# sourceMappingURL=ReviewForm.js.map