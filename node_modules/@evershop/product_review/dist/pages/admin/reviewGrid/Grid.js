import { Card } from "@components/admin/cms/Card";
import Area from "@components/common/Area";
import { Field } from "@components/common/form/Field";
import { Checkbox } from "@components/common/form/fields/Checkbox";
import { Form } from "@components/common/form/Form";
import DummyColumnHeader from "@components/common/grid/headers/Dummy";
import SortableHeader from "@components/common/grid/headers/Sortable";
import Pagination from "@components/common/grid/Pagination";
import BasicRow from "@components/common/grid/rows/BasicRow";
import { useAlertContext } from "@components/common/modal/Alert";
import axios from "axios";
import PropTypes from "prop-types";
import React, { useState } from "react";
import CommentRow from "./row/CommentRow";
import IsApprovedRow from "./row/IsApprovedRow";
import ProductRow from "./row/ProductRow";
import RatingRow from "./row/RatingRow";
function Actions({ reviews = [], selectedIds = [] }) {
    const { openAlert, closeAlert } = useAlertContext();
    const [isLoading, setIsLoading] = useState(false);
    const approveReviews = async () => {
        setIsLoading(true);
        const promises = reviews
            .filter((review) => selectedIds.includes(review.uuid))
            .map((review) => axios.patch(review.approveApi));
        await Promise.all(promises);
        setIsLoading(false);
        // Refresh the page
        window.location.reload();
    };
    const unApproveReviews = async () => {
        setIsLoading(true);
        const promises = reviews
            .filter((review) => selectedIds.includes(review.uuid))
            .map((review) => axios.patch(review.unApproveApi));
        await Promise.all(promises);
        setIsLoading(false);
        // Refresh the page
        window.location.reload();
    };
    const deleteReviews = async () => {
        setIsLoading(true);
        const promises = reviews
            .filter((review) => selectedIds.includes(review.uuid))
            .map((review) => axios.delete(review.deleteApi));
        await Promise.all(promises);
        setIsLoading(false);
        // Refresh the page
        window.location.reload();
    };
    const actions = [
        {
            name: "Unapprove",
            onAction: () => {
                openAlert({
                    heading: `Unapprove ${selectedIds.length} reviews`,
                    content: "Are you sure?",
                    primaryAction: {
                        title: "Cancel",
                        onAction: closeAlert,
                        variant: "primary",
                    },
                    secondaryAction: {
                        title: "Unapprove",
                        onAction: async () => {
                            await unApproveReviews();
                        },
                        variant: "critical",
                        isLoading: false,
                    },
                });
            },
        },
        {
            name: "Approve",
            onAction: () => {
                openAlert({
                    heading: `Approve ${selectedIds.length} reviews`,
                    content: "Are you sure?",
                    primaryAction: {
                        title: "Cancel",
                        onAction: closeAlert,
                        variant: "primary",
                    },
                    secondaryAction: {
                        title: "Approve",
                        onAction: async () => {
                            await approveReviews();
                        },
                        variant: "critical",
                        isLoading: false,
                    },
                });
            },
        },
        {
            name: "Delete",
            onAction: () => {
                openAlert({
                    heading: `Delete ${selectedIds.length} reviews`,
                    content: React.createElement("div", null, "Can't be undone"),
                    primaryAction: {
                        title: "Cancel",
                        onAction: closeAlert,
                        variant: "primary",
                    },
                    secondaryAction: {
                        title: "Delete",
                        onAction: async () => {
                            await deleteReviews();
                        },
                        variant: "critical",
                        isLoading,
                    },
                });
            },
        },
    ];
    return (React.createElement("tr", null,
        selectedIds.length === 0 && null,
        selectedIds.length > 0 && (React.createElement("td", { style: { borderTop: 0 }, colSpan: "100" },
            React.createElement("div", { className: "inline-flex border border-divider rounded justify-items-start" },
                React.createElement("a", { href: "#", className: "font-semibold pt-3 pb-3 pl-6 pr-6" },
                    selectedIds.length,
                    " selected"),
                actions.map((action) => (React.createElement("a", { key: action.name, href: "#", onClick: (e) => {
                        e.preventDefault();
                        action.onAction();
                    }, className: "font-semibold pt-3 pb-3 pl-6 pr-6 block border-l border-divider self-center" },
                    React.createElement("span", null, action.name)))))))));
}
Actions.propTypes = {
    selectedIds: PropTypes.arrayOf(PropTypes.string).isRequired,
    reviews: PropTypes.arrayOf(PropTypes.shape({
        uuid: PropTypes.number.isRequired,
        updateApi: PropTypes.string.isRequired,
        deleteApi: PropTypes.string.isRequired,
    })).isRequired,
};
export default function ReviewGrid({ reviews: { items: reviews, total, currentFilters = [] }, }) {
    const page = currentFilters.find((filter) => filter.key === "page")
        ? currentFilters.find((filter) => filter.key === "page").value
        : 1;
    const limit = currentFilters.find((filter) => filter.key === "limit")
        ? currentFilters.find((filter) => filter.key === "limit").value
        : 20;
    const [selectedRows, setSelectedRows] = useState([]);
    return (React.createElement(Card, null,
        React.createElement(Card.Session, { title: React.createElement(Form, { submitBtn: false },
                React.createElement(Area, { id: "productReviewGridFilter", noOuter: true, coreComponents: [
                        {
                            component: {
                                default: () => {
                                    var _a;
                                    return (React.createElement(Field, { type: "text", id: "keyword", placeholder: "Search", value: (_a = currentFilters.find((f) => f.key === "keyword")) === null || _a === void 0 ? void 0 : _a.value, onKeyPress: (e) => {
                                            var _a;
                                            // If the user press enter, we should submit the form
                                            if (e.key === "Enter") {
                                                const url = new URL(document.location);
                                                const keyword = (_a = document.getElementById("keyword")) === null || _a === void 0 ? void 0 : _a.value;
                                                if (keyword) {
                                                    url.searchParams.set("keyword[operation]", "like");
                                                    url.searchParams.set("keyword[value]", keyword);
                                                }
                                                else {
                                                    url.searchParams.delete("keyword[operation]");
                                                    url.searchParams.delete("keyword[value]");
                                                }
                                                window.location.href = url;
                                            }
                                        } }));
                                },
                            },
                            sortOrder: 10,
                        },
                    ] })), actions: [
                {
                    variant: "interactive",
                    name: "Clear filter",
                    onAction: () => {
                        // Just get the url and remove all query params
                        const url = new URL(document.location);
                        url.search = "";
                        window.location.href = url.href;
                    },
                },
            ] }),
        React.createElement("table", { className: "listing sticky" },
            React.createElement("thead", null,
                React.createElement("tr", null,
                    React.createElement("th", { className: "align-bottom" },
                        React.createElement(Checkbox, { onChange: (e) => {
                                if (e.target.checked) {
                                    setSelectedRows(reviews.map((r) => r.uuid));
                                }
                                else {
                                    setSelectedRows([]);
                                }
                            } })),
                    React.createElement(Area, { className: "", id: "reviewGridHeader", noOuter: true, coreComponents: [
                            {
                                component: {
                                    default: () => (React.createElement(SortableHeader, { title: "Product", name: "product", currentFilters: currentFilters })),
                                },
                                sortOrder: 2,
                            },
                            {
                                component: {
                                    default: () => React.createElement(DummyColumnHeader, { title: "Customer Name" }),
                                },
                                sortOrder: 5,
                            },
                            {
                                component: {
                                    default: () => React.createElement(DummyColumnHeader, { title: "Comment" }),
                                },
                                sortOrder: 10,
                            },
                            {
                                component: {
                                    default: () => (React.createElement(SortableHeader, { title: "Rating", name: "rating", currentFilters: currentFilters })),
                                },
                                sortOrder: 15,
                            },
                            {
                                component: {
                                    default: () => (React.createElement(SortableHeader, { title: "Is Approved?", name: "status", currentFilters: currentFilters })),
                                },
                                sortOrder: 20,
                            },
                        ] }))),
            React.createElement("tbody", null,
                React.createElement(Actions, { reviews: reviews, selectedIds: selectedRows, setSelectedRows: setSelectedRows }),
                reviews.map((r, i) => (React.createElement("tr", { key: i },
                    React.createElement("td", { style: { width: "2rem" } },
                        React.createElement(Checkbox, { isChecked: selectedRows.includes(r.uuid), onChange: (e) => {
                                if (e.target.checked) {
                                    setSelectedRows(selectedRows.concat([r.uuid]));
                                }
                                else {
                                    setSelectedRows(selectedRows.filter((row) => row !== r.uuid));
                                }
                            } })),
                    React.createElement(Area, { className: "", id: "reviewGridRow", row: r, noOuter: true, coreComponents: [
                            {
                                component: {
                                    default: () => React.createElement(ProductRow, { product: r.product }),
                                },
                                sortOrder: 5,
                            },
                            {
                                component: {
                                    default: ({ areaProps }) => (React.createElement(BasicRow, { areaProps: areaProps, id: "customerName" })),
                                },
                                sortOrder: 5,
                            },
                            {
                                component: {
                                    default: () => React.createElement(CommentRow, { comment: r.comment }),
                                },
                                sortOrder: 10,
                            },
                            {
                                component: {
                                    default: () => React.createElement(RatingRow, { rating: r.rating }),
                                },
                                sortOrder: 15,
                            },
                            {
                                component: {
                                    default: () => React.createElement(IsApprovedRow, { approved: r.approved }),
                                },
                                sortOrder: 20,
                            },
                        ] })))))),
        reviews.length === 0 && (React.createElement("div", { className: "flex w-full justify-center" }, "There is no review to display")),
        React.createElement(Pagination, { total: total, limit: limit, page: page })));
}
ReviewGrid.propTypes = {
    reviews: PropTypes.shape({
        items: PropTypes.arrayOf(PropTypes.shape({
            uuid: PropTypes.string.isRequired,
            rating: PropTypes.number.isRequired,
            approved: PropTypes.bool.isRequired,
            comment: PropTypes.string.isRequired,
            approveApi: PropTypes.string.isRequired,
            unApproveApi: PropTypes.string.isRequired,
            deleteApi: PropTypes.string.isRequired,
        })),
        total: PropTypes.number.isRequired,
        currentFilters: PropTypes.arrayOf(PropTypes.shape({
            key: PropTypes.string.isRequired,
            operation: PropTypes.string.isRequired,
            value: PropTypes.string.isRequired,
        })),
    }).isRequired,
};
export const layout = {
    areaId: "content",
    sortOrder: 20,
};
export const query = `
  query Query($filters: [FilterInput]) {
    reviews (filters: $filters) {
      items {
        reviewId
        uuid
        rating
        customerName
        approved
        comment
        approveApi
        unApproveApi
        deleteApi
        product {
          name
          editUrl
        }
      }
      total
      currentFilters {
        key
        operation
        value
      }
    }
  }
`;
export const variables = `
{
  filters: getContextValue('filtersFromUrl')
}`;
//# sourceMappingURL=Grid.js.map